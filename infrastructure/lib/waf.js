"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WafConstruct = void 0;
const cdk = require("@aws-cdk/core");
const waf = require("@aws-cdk/aws-wafv2");
// https://github.com/cdk-patterns/serverless/blob/main/the-waf-apigateway/typescript/lib/the-waf-stack.ts
class WafConstruct extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const wafRules = [];
        const awsCommonRuleSet = {
            name: 'AWSManagedRulesCommonRuleSet',
            priority: 1,
            overrideAction: { none: {} },
            statement: {
                managedRuleGroupStatement: {
                    name: 'AWSManagedRulesCommonRuleSet',
                    vendorName: 'AWS',
                }
            },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: 'awsCommonRules',
                sampledRequestsEnabled: true
            }
        };
        wafRules.push(awsCommonRuleSet);
        const cfnIPSet = new waf.CfnIPSet(this, 'MyCfnIPSet', {
            name: 'mkurienHomeIP',
            addresses: [process.env.MYIP || ""],
            scope: "REGIONAL",
            ipAddressVersion: 'IPV4'
        });
        const allowByIP = {
            name: 'allowHomeIP',
            priority: 2,
            action: {
                allow: {}
            },
            statement: {
                ipSetReferenceStatement: {
                    arn: cfnIPSet.attrArn
                }
            },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: 'allowHomeIP',
                sampledRequestsEnabled: true
            }
        };
        wafRules.push(allowByIP);
        const awsBotRuleSet = {
            name: 'AWSManagedRulesBotControlRuleSet',
            priority: 3,
            overrideAction: { none: {} },
            statement: {
                managedRuleGroupStatement: {
                    name: 'AWSManagedRulesBotControlRuleSet',
                    vendorName: 'AWS',
                }
            },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: 'awsReputation',
                sampledRequestsEnabled: true
            }
        };
        wafRules.push(awsBotRuleSet);
        // Create our Web ACL
        const webACL = new waf.CfnWebACL(this, 'WebACL', {
            defaultAction: {
                allow: {}
            },
            scope: 'REGIONAL',
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: 'webACL',
                sampledRequestsEnabled: true
            },
            rules: wafRules
        });
        // Associate with our gateway
        new waf.CfnWebACLAssociation(this, 'WebACLAssociation', {
            webAclArn: webACL.attrArn,
            resourceArn: props.gatewayARN
        });
    }
}
exports.WafConstruct = WafConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQywwQ0FBMEM7QUFLMUMsMEdBQTBHO0FBQzFHLE1BQWEsWUFBYSxTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBQzNDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0I7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFFBQVEsR0FBc0MsRUFBRSxDQUFDO1FBRXZELE1BQU0sZ0JBQWdCLEdBQStCO1lBQ2pELElBQUksRUFBRSw4QkFBOEI7WUFDcEMsUUFBUSxFQUFFLENBQUM7WUFDWCxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQzVCLFNBQVMsRUFBRTtnQkFDUCx5QkFBeUIsRUFBRTtvQkFDdkIsSUFBSSxFQUFFLDhCQUE4QjtvQkFDcEMsVUFBVSxFQUFFLEtBQUs7aUJBQ3BCO2FBQ0o7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDZCx3QkFBd0IsRUFBRSxJQUFJO2dCQUM5QixVQUFVLEVBQUUsZ0JBQWdCO2dCQUM1QixzQkFBc0IsRUFBRSxJQUFJO2FBQy9CO1NBQ0osQ0FBQztRQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUVoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNsRCxJQUFJLEVBQUUsZUFBZTtZQUNyQixTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbkMsS0FBSyxFQUFFLFVBQVU7WUFDakIsZ0JBQWdCLEVBQUUsTUFBTTtTQUMzQixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBK0I7WUFDMUMsSUFBSSxFQUFFLGFBQWE7WUFDbkIsUUFBUSxFQUFFLENBQUM7WUFDWCxNQUFNLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLEVBQUU7YUFDWjtZQUNELFNBQVMsRUFBRTtnQkFDUCx1QkFBdUIsRUFBRTtvQkFDckIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxPQUFPO2lCQUN4QjthQUNKO1lBQ0QsZ0JBQWdCLEVBQUU7Z0JBQ2Qsd0JBQXdCLEVBQUUsSUFBSTtnQkFDOUIsVUFBVSxFQUFFLGFBQWE7Z0JBQ3pCLHNCQUFzQixFQUFFLElBQUk7YUFDL0I7U0FDSixDQUFDO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6QixNQUFNLGFBQWEsR0FBK0I7WUFDOUMsSUFBSSxFQUFFLGtDQUFrQztZQUN4QyxRQUFRLEVBQUUsQ0FBQztZQUNYLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDNUIsU0FBUyxFQUFFO2dCQUNQLHlCQUF5QixFQUFFO29CQUN2QixJQUFJLEVBQUUsa0NBQWtDO29CQUN4QyxVQUFVLEVBQUUsS0FBSztpQkFDcEI7YUFDSjtZQUNELGdCQUFnQixFQUFFO2dCQUNkLHdCQUF3QixFQUFFLElBQUk7Z0JBQzlCLFVBQVUsRUFBRSxlQUFlO2dCQUMzQixzQkFBc0IsRUFBRSxJQUFJO2FBQy9CO1NBQ0osQ0FBQztRQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFHN0IscUJBQXFCO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzdDLGFBQWEsRUFBRTtnQkFDWCxLQUFLLEVBQUUsRUFBRTthQUNaO1lBQ0QsS0FBSyxFQUFFLFVBQVU7WUFDakIsZ0JBQWdCLEVBQUU7Z0JBQ2Qsd0JBQXdCLEVBQUUsSUFBSTtnQkFDOUIsVUFBVSxFQUFFLFFBQVE7Z0JBQ3BCLHNCQUFzQixFQUFFLElBQUk7YUFDL0I7WUFDRCxLQUFLLEVBQUUsUUFBUTtTQUNsQixDQUFDLENBQUM7UUFFSCw2QkFBNkI7UUFDN0IsSUFBSSxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ3BELFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTztZQUN6QixXQUFXLEVBQUUsS0FBSyxDQUFDLFVBQVU7U0FDaEMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBekZELG9DQXlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIHdhZiBmcm9tIFwiQGF3cy1jZGsvYXdzLXdhZnYyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FmQ29uc3RydWN0UHJvcHMgZXh0ZW5kcyBjZGsuU3RhY2tQcm9wcyB7XG4gICAgZ2F0ZXdheUFSTjogc3RyaW5nXG59XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2RrLXBhdHRlcm5zL3NlcnZlcmxlc3MvYmxvYi9tYWluL3RoZS13YWYtYXBpZ2F0ZXdheS90eXBlc2NyaXB0L2xpYi90aGUtd2FmLXN0YWNrLnRzXG5leHBvcnQgY2xhc3MgV2FmQ29uc3RydWN0IGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBXYWZDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHdhZlJ1bGVzOiBBcnJheTx3YWYuQ2ZuV2ViQUNMLlJ1bGVQcm9wZXJ0eT4gPSBbXTtcblxuICAgICAgICBjb25zdCBhd3NDb21tb25SdWxlU2V0OiB3YWYuQ2ZuV2ViQUNMLlJ1bGVQcm9wZXJ0eSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdBV1NNYW5hZ2VkUnVsZXNDb21tb25SdWxlU2V0JyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgb3ZlcnJpZGVBY3Rpb246IHsgbm9uZToge30gfSxcbiAgICAgICAgICAgIHN0YXRlbWVudDoge1xuICAgICAgICAgICAgICAgIG1hbmFnZWRSdWxlR3JvdXBTdGF0ZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0FXU01hbmFnZWRSdWxlc0NvbW1vblJ1bGVTZXQnLFxuICAgICAgICAgICAgICAgICAgICB2ZW5kb3JOYW1lOiAnQVdTJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJpbGl0eUNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGNsb3VkV2F0Y2hNZXRyaWNzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXRyaWNOYW1lOiAnYXdzQ29tbW9uUnVsZXMnLFxuICAgICAgICAgICAgICAgIHNhbXBsZWRSZXF1ZXN0c0VuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2FmUnVsZXMucHVzaChhd3NDb21tb25SdWxlU2V0KTtcblxuICAgICAgICBjb25zdCBjZm5JUFNldCA9IG5ldyB3YWYuQ2ZuSVBTZXQodGhpcywgJ015Q2ZuSVBTZXQnLCB7XG4gICAgICAgICAgICBuYW1lOiAnbWt1cmllbkhvbWVJUCcsXG4gICAgICAgICAgICBhZGRyZXNzZXM6IFtwcm9jZXNzLmVudi5NWUlQIHx8IFwiXCJdLFxuICAgICAgICAgICAgc2NvcGU6IFwiUkVHSU9OQUxcIixcbiAgICAgICAgICAgIGlwQWRkcmVzc1ZlcnNpb246ICdJUFY0J1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhbGxvd0J5SVA6IHdhZi5DZm5XZWJBQ0wuUnVsZVByb3BlcnR5ID0ge1xuICAgICAgICAgICAgbmFtZTogJ2FsbG93SG9tZUlQJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAyLFxuICAgICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgYWxsb3c6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVtZW50OiB7XG4gICAgICAgICAgICAgICAgaXBTZXRSZWZlcmVuY2VTdGF0ZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJuOiBjZm5JUFNldC5hdHRyQXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2liaWxpdHlDb25maWc6IHtcbiAgICAgICAgICAgICAgICBjbG91ZFdhdGNoTWV0cmljc0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbWV0cmljTmFtZTogJ2FsbG93SG9tZUlQJyxcbiAgICAgICAgICAgICAgICBzYW1wbGVkUmVxdWVzdHNFbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdhZlJ1bGVzLnB1c2goYWxsb3dCeUlQKTtcblxuICAgICAgICBjb25zdCBhd3NCb3RSdWxlU2V0OiB3YWYuQ2ZuV2ViQUNMLlJ1bGVQcm9wZXJ0eSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdBV1NNYW5hZ2VkUnVsZXNCb3RDb250cm9sUnVsZVNldCcsXG4gICAgICAgICAgICBwcmlvcml0eTogMyxcbiAgICAgICAgICAgIG92ZXJyaWRlQWN0aW9uOiB7IG5vbmU6IHt9IH0sXG4gICAgICAgICAgICBzdGF0ZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBtYW5hZ2VkUnVsZUdyb3VwU3RhdGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdBV1NNYW5hZ2VkUnVsZXNCb3RDb250cm9sUnVsZVNldCcsXG4gICAgICAgICAgICAgICAgICAgIHZlbmRvck5hbWU6ICdBV1MnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmlsaXR5Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgY2xvdWRXYXRjaE1ldHJpY3NFbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1ldHJpY05hbWU6ICdhd3NSZXB1dGF0aW9uJyxcbiAgICAgICAgICAgICAgICBzYW1wbGVkUmVxdWVzdHNFbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdhZlJ1bGVzLnB1c2goYXdzQm90UnVsZVNldCk7XG5cblxuICAgICAgICAvLyBDcmVhdGUgb3VyIFdlYiBBQ0xcbiAgICAgICAgY29uc3Qgd2ViQUNMID0gbmV3IHdhZi5DZm5XZWJBQ0wodGhpcywgJ1dlYkFDTCcsIHtcbiAgICAgICAgICAgIGRlZmF1bHRBY3Rpb246IHtcbiAgICAgICAgICAgICAgICBhbGxvdzoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY29wZTogJ1JFR0lPTkFMJyxcbiAgICAgICAgICAgIHZpc2liaWxpdHlDb25maWc6IHtcbiAgICAgICAgICAgICAgICBjbG91ZFdhdGNoTWV0cmljc0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbWV0cmljTmFtZTogJ3dlYkFDTCcsXG4gICAgICAgICAgICAgICAgc2FtcGxlZFJlcXVlc3RzRW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ1bGVzOiB3YWZSdWxlc1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBc3NvY2lhdGUgd2l0aCBvdXIgZ2F0ZXdheVxuICAgICAgICBuZXcgd2FmLkNmbldlYkFDTEFzc29jaWF0aW9uKHRoaXMsICdXZWJBQ0xBc3NvY2lhdGlvbicsIHtcbiAgICAgICAgICAgIHdlYkFjbEFybjogd2ViQUNMLmF0dHJBcm4sXG4gICAgICAgICAgICByZXNvdXJjZUFybjogcHJvcHMuZ2F0ZXdheUFSTlxuICAgICAgICB9KVxuICAgIH1cbn0iXX0=